# test.data -- regression tests for Getopt::Long
# Author          : Johan Vromans
# Created On      : Fri Aug 24 11:23:46 2001
# Last Modified By: 
# Last Modified On: Mon Nov 20 18:58:46 2023
# Update Count    : 610
# Status          : In progress

################ No args ################

T: No args
P:
A:

################ Non-opt args ################

T: Non-opt arg
A: foo
   @ARGV foo

T: Non-opt arg with --
A: -- foo
P:
   @ARGV foo

T: --
A: --
P:

################ Simple args ################

P: v1

T: Simple arg with global destination
A: -v1
   $opt_v1 1

T: Simple arg with global destination
A: -v1 foo
   $opt_v1 1
   @ARGV foo

T: Simple arg with global destination
A: -v1 --
   $opt_v1 1

T: Simple arg with global destination
A: -v1 -- foo
   $opt_v1 1
   @ARGV foo

P: one \\$v1

T: Simple arg with explicit destination
A: -one
   $v1 1

T: Simple arg with explicit destination
A: -one foo
   $v1 1
   @ARGV foo

T: Simple arg with explicit destination
A: -one --
   $v1 1

T: Simple arg with explicit destination
A: -one -- foo
   $v1 1
   @ARGV foo

# Clear sticky parameters
P:

################ Permute ################

P: one \\$v1

T: Permute
A: -one foo
   $v1 1
   @ARGV foo

T: Permute
A: foo -one
   $v1 1
   @ARGV foo

T: Nopermute
O: no_permute
A: foo -one
   @ARGV foo -one

T: Nopermute (POSIX)
O: posix_defaults
A: foo -one
   @ARGV foo -one

T: Permute
A: foo -one
   $v1 1
   @ARGV foo

# Clear sticky parameters
P:

################ Case ignoring ################

P: one \\$v1

T: Basic case ignoring
A: -oNe
   $v1 1

T: Basic no case ignore
O: no_ignore_case
A: -oNe
W: Unknown option: oNe

T: Basic case ignoring
A: -oNe
   $v1 1

P: one \\$v1 One \\$v2 oNe \\$v3

R: <= 2.2603

T: Due to case ignoring, one becomes an alias for oNe
A: -oNe -one foo
   $v3 1
   @ARGV foo

T: Due to case ignoring, one becomes an alias for One
A: -One -one foo
   $v3 1
   @ARGV foo

R: 2.2604

T: Due to case ignoring, one becomes an alias for oNe
W: Duplicate specification "One" for option "one"
W: Duplicate specification "oNe" for option "one"

R:

T: Without case ignore
O: no_ignore_case
A: -one foo
   $v1 1
   @ARGV foo

T: Without case ignore
O: no_ignore_case
A: -One foo
   $v2 1
   @ARGV foo

T: Without case ignore
O: no_ignore_case
A: -oNe foo
   $v3 1
   @ARGV foo

T: Without case ignore
O: no_ignore_case
A: -oNe -one -One foo
   $v1 1
   $v2 1
   $v3 1
   @ARGV foo

# Clear sticky parameters
P:

################ Abbreviations ################

P: abc \\$v1 def \\$v2 ghi \\$v3

T: Basic abbreviations
A: -abc foo
   $v1 1
   @ARGV foo

T: Basic abbreviations
A: -de foo
   $v2 1
   @ARGV foo

T: Basic abbreviations
A: -g foo
   $v3 1
   @ARGV foo

P: abd \\$v1 ade \\$v2

T: Ambiguity
A: -a
W: Option a is ambiguous (abd, ade)

T: Non-ambiguity
A: -ab foo
   $v1 1
   @ARGV foo

# Clear sticky parameters
P:

################ Aliases ################

P: abc|pqr \\$v1 def|stu \\$v2 ghi|vwx|yz \\$v3

T: Aliases
A: -abc -def -ghi foo
   $v1 1
   $v2 1
   $v3 1
   @ARGV foo

T: Aliases
A: -pqr -stu -vwx foo
   $v1 1
   $v2 1
   $v3 1
   @ARGV foo

T: Aliases
A: -yz foo
   $v3 1
   @ARGV foo

T: ? alias
P: help|? \\$v1
A: -help foo
   $v1 1
   @ARGV foo

T: ? alias
P: help|? \\$v1
A: -? foo
   $v1 1
   @ARGV foo

T: Allow ? as an alias (not primary).
P: help ? ?? ?|help
A: foo
E: Error in option spec: "?"
E: Error in option spec: "??"
E: Error in option spec: "?|help"

# Clear sticky parameters
P:

################ Option introducers ################

P: abc \\$v1

T: Option introducers
A: -abc foo
   $v1 1
   @ARGV foo

T: Option introducers
A: --abc foo
   $v1 1
   @ARGV foo

T: Option introducers
A: +abc foo
   $v1 1
   @ARGV foo

T: Option introducers
A: +abc -- foo
   $v1 1
   @ARGV foo

T: Option introducers
A: +abc ++ foo
W: Unknown option: +

T: Option introducers
O: posix_defaults
A: +abc ++ foo
   @ARGV +abc ++ foo

T: Option introducers
O: no_getopt_compat
A: +abc ++ foo
   @ARGV +abc ++ foo

# Clear sticky parameters
P:

################ Negation ################

P: one! \\$v1

T: Negation
A: -one foo
   $v1 1
   @ARGV foo

T: Negation
A: -noone foo
   $v1 0
   @ARGV foo

T: Negation
A: -no-one foo
   $v1 0
   @ARGV foo

P: one|two! \\$v1

T: Negation
A: -two foo
   $v1 1
   @ARGV foo

T: Negation
A: -notwo foo
   $v1 0
   @ARGV foo

T: Negation
P: one|two! \\$v1
A: -one -notwo foo
   $v1 0
   @ARGV foo

T: Negation
P: one|two! \\$v1
A: -no-one -two foo
   $v1 1
   @ARGV foo

# Clear sticky parameters
P:

################ Increments ################

P: one|o+ \\$v1

T: Increment
A: -one foo
   $v1 1
   @ARGV foo

T: Increment
A: -one -one foo
   $v1 2
   @ARGV foo

T: Increment
A: -one -one -o -on foo
   $v1 4
   @ARGV foo

T: Increment
O: bundling
A: -ooo foo
   $v1 3
   @ARGV foo

# Clear sticky parameters
P:

################ No arguments ################

T: No arguments allowed
P: one
A: -one= foo
W: Option one does not take an argument
   @ARGV foo

T: No arguments allowed
P: one
A: --one= foo
W: Option one does not take an argument
   @ARGV foo

T: No arguments allowed
P: one
A: +one= foo
W: Option one does not take an argument
   @ARGV foo

### Revised so far

################ String opt (mandatory) ################

P: v2=s

T: String opt (mandatory)
A: -v2 bar foo
   $opt_v2 bar
   @ARGV foo

T: String opt (mandatory)
A: -v2 -bar foo
   $opt_v2 -bar
   @ARGV foo

T: String opt (mandatory)
A: -v2 -bar -v2 blech foo
   $opt_v2 blech
   @ARGV foo

T: String opt (mandatory)
A: --v2=-bar --v2=blech foo
   $opt_v2 blech
   @ARGV foo

T: String opt (mandatory)
A: -v2 -- foo
   $opt_v2 --
   @ARGV foo

T: String opt (mandatory)
A: --v2=-- foo
   $opt_v2 --
   @ARGV foo

T: String opt (mandatory)
A: -v2
W: Option v2 requires an argument

T: String opt (mandatory)
A: --v2= foo
W: Option v2 requires an argument

T: String opt (mandatory)
O: gnu_compat
A: --v2= foo
   $opt_v2 ""
   @ARGV foo

T: String opt (mandatory, multiple)
P: a1=s@
A: -a1 -bar -a1 blech foo
   @opt_a1 -bar blech
   @ARGV foo

# Clear sticky opts.
P:

################ String opt (optional) ################

P: v3:s v1

T: String opt (optional)
A: -v3 bar foo
   $opt_v3 bar
   @ARGV foo

T: String opt (optional)
A: -v3 -v1 foo
   $opt_v1 1
   $opt_v3 ''
   @ARGV foo

T: String opt (optional)
A: -v3 xx -v3 -v1 foo
   $opt_v1 1
   $opt_v3 ''
   @ARGV foo

T: String opt (optional)
A: -v3 --
   $opt_v3 ''

T: String opt (optional)
A: -v3
   $opt_v3 ''

T: String opt (optional, multiple)
P: a3:s@ v1
A: -a3 xx -a3 -v1 foo
   @opt_a3 xx ''
   $opt_v1 1
   @ARGV foo

# Clear sticky opts.
P:

################ Int opt (mandatory) ################

P: v1=i

T: Int opt (mandatory)
A: -v1 327 foo
   $opt_v1 == 327
   @ARGV foo

T: Int opt (mandatory)
A: -v1 327
   $opt_v1 == 327

T: Int opt (mandatory)
A: -v1=327
   $opt_v1 == 327

R: 2.3502

T: Int opt (mandatory)
A: -v1 _327 foo
   $opt_v1 == 327
   @ARGV foo

T: Int opt (mandatory)
A: -v1 32_7_
   $opt_v1 == 327

T: Int opt (mandatory)
A: -v1=3_2_7
   $opt_v1 == 327

R:

T: Int opt (mandatory)
A: --v1=
W: Option v1 requires an argument

T: Int opt (mandatory)
O: gnu_getopt
A: --v1=
   $opt_v1 == 0

T: Int opt (mandatory)
A: -v1 -6 foo
   $opt_v1 == -6
   @ARGV foo

T: Int opt (mandatory)
A: -v1 bar foo
W: Value "bar" invalid for option v1 (integer number expected)

T: Int opt (mandatory)
O: gnu_compat

A: -v1=bar foo
W: Value "bar" invalid for option v1 (integer number expected)

T: Int opt (mandatory)
A: -v1 -bar foo
W: Value "-bar" invalid for option v1 (integer number expected)

T: Int opt (mandatory)
A: -v1 --
W: Value "--" invalid for option v1 (integer number expected)

T: Int opt (mandatory)
A: -v1
W: Option v1 requires an argument

T: Int opt (mandatory, multiple)
P: a1=i@
A: -a1 -24 -a1 12 foo
   @opt_a1 -24 12
   @ARGV foo

# Clear sticky opts.
P:

################ Int opt (optional) ################

P: v2:i v1

T: Int opt (optinal)
A: -v2 foo
   $opt_v2 0
   @ARGV foo

T: Int opt (optinal)
A: -v2 12 foo
   $opt_v2 12
   @ARGV foo

T: Int opt (optinal)
A: -v2 12
   $opt_v2 12

T: Int opt (optinal)
A: -v2 -12 foo
   $opt_v2 -12
   @ARGV foo

T: Int opt (optinal)
A: -v2 +12 foo
   $opt_v2 12
   @ARGV foo

T: Int opt (optinal)
A: -v2 -12
   $opt_v2 -12

T: Int opt (optinal)
A: -v2 12 -v2 -v1 foo
   $opt_v2 0
   $opt_v1 == 1
   @ARGV foo

T: Int opt (optinal)
A: -v2 --
   $opt_v2 0

T: Int opt (optinal)
A: -v2
   $opt_v2 0

T: Int opt (optinal, multiple)
P: a2:i@ v1
A: -a2 -24 -a2 -v1 foo
   $opt_v1 1
   @opt_a2 -24 0
   @ARGV foo

# Clear sticky opts.
P:

################ Ext Int opt (mandatory) ################

P: v1=o

T: Ext Int opt (mandatory)
A: -v1 327 foo
   $opt_v1 == 327
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 0327 foo
   $opt_v1 == 0327
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 0b00101001 foo
   $opt_v1 == 0b00101001
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 0x327 foo
   $opt_v1 == 0x327
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 0xBadBad foo
   $opt_v1 == 0xBADBAD
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 -6 foo
   $opt_v1 == -6
   @ARGV foo

R: 2.3502

T: Ext Int opt (mandatory)
A: -v1 0_327 foo
   $opt_v1 == 0327
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 0b_001_01001 foo
   $opt_v1 == 0b00101001
   @ARGV foo

T: Ext Int opt (mandatory)
A: -v1 0x___327 foo
   $opt_v1 == 0x327
   @ARGV foo

R:

T: Ext Int opt (mandatory)
A: -v1 019 foo
W: Value "019" invalid for option v1 (extended integer number expected)

T: Ext Int opt (mandatory)
A: -v1 0xefg foo
W: Value "0xefg" invalid for option v1 (extended integer number expected)

T: Ext Int opt (mandatory)
A: -v1 0b012 foo
W: Value "0b012" invalid for option v1 (extended integer number expected)

# Clear sticky opts.
P:

################ Float opt (mandatory) ################

P: v3=f

T: Float opt (mandatory)
A: -v3 327 foo
   $opt_v3 327
   @ARGV foo

T: Float opt (mandatory)
A: -v3 3.27 foo
   $opt_v3 == 3.27
   @ARGV foo

T: Float opt (mandatory)
A: -v3 3.18e2 foo
   $opt_v3 == 318
   @ARGV foo

T: Float opt (mandatory)
A: -v3 +3.18e2 foo
   $opt_v3 == 318
   @ARGV foo

T: Float opt (mandatory)
A: -v3 3.18e2
   $opt_v3 == 318

T: Float opt (mandatory)
A: -v3 +3.18e2
   $opt_v3 == 318

T: Float opt (mandatory)
A: -v3 -6 foo
   $opt_v3 == -6
   @ARGV foo

T: Float opt (mandatory)
A: -v3 -6.4 foo
   $opt_v3 == -6.4
   @ARGV foo

T: Float opt (mandatory)
A: -v3 .4 foo
   $opt_v3 == 0.4
   @ARGV foo

T: Float opt (mandatory)
A: -v3 -.4e1 foo
   $opt_v3 == -4
   @ARGV foo

T: Float opt (mandatory)
A: -v3 4. foo
   $opt_v3 == 4
   @ARGV foo

T: Float opt (mandatory)
A: -v3 -4.e1 foo
   $opt_v3 == -40
   @ARGV foo

T: Float opt (mandatory)
A: -v3 -6.4e-1 foo
   $opt_v3 == -0.64
   @ARGV foo

R: <2.4601

T: Float opt (mandatory)
A: -v3 -_6 foo
   $opt_v3 == -6
   @ARGV foo

R: 2.3502

T: Float opt (mandatory)
A: -v3 -6._4 foo
   $opt_v3 == -6.4
   @ARGV foo

T: Float opt (mandatory)
A: -v3 -6.4_e-1 foo
   $opt_v3 == -0.64
   @ARGV foo

R:

T: Float opt (mandatory)
A: -v3 bar foo
W: Value "bar" invalid for option v3 (real number expected)

T: Float opt (mandatory)
A: -v3 -bar foo
W: Value "-bar" invalid for option v3 (real number expected)

T: Float opt (mandatory)
A: -v3 -- foo
W: Value "--" invalid for option v3 (real number expected)

T: Float opt (mandatory)
A: -v3
W: Option v3 requires an argument

T: Float opt (mandatory, multiple)
P: a3=f@
A: -a3 -0.24 -a3 1.2 foo
   @opt_a3 -0.24 1.2
   @ARGV foo

# Clear sticky opts.
P:

################ Float opt (optional) ################

P: v1:f a1:f@ v2

T: Float opt (optional)
A: -v1 foo
   $opt_v1 == 0
   @ARGV foo

T: Float opt (optional)
A: -v1 12 foo
   $opt_v1 == 12
   @ARGV foo

T: Float opt (optional)
A: -v1 12
   $opt_v1 == 12

T: Float opt (optional)
A: -v1 1.2 foo
   $opt_v1 == 1.2
   @ARGV foo

T: Float opt (optional)
A: -v1 -12 foo
   $opt_v1 == -12
   @ARGV foo

T: Float opt (optional)
A: -v1 -1.42 foo
   $opt_v1 == -1.42
   @ARGV foo

T: Float opt (optional)
A: -v1 -1.32
   $opt_v1 == -1.32

T: Float opt (optional)
A: -v1 1.3 -v1 -v2 foo
   $opt_v1 == 0.0
   $opt_v2 1
   @ARGV foo

T: Float opt (optional)
A: -v1 --
   $opt_v1 == 0.0

T: Float opt (optional)
A: -v1
   $opt_v1 == 0.0

T: Float opt (optional, multiple)
A: -a1 -2.74 -a1 -v2 foo
   $opt_v2 1
   @opt_a1 -2.74 0
   @ARGV foo

# Clear sticky opts.
P:

################ Opt Int/Oct/Hex With Default ################

R: 2.2605

T: Optional int with default
P: v1:5
A: -v1
   $opt_v1 5

T: Optional oct with default
P: v1:011
A: -v1
   $opt_v1 9

T: Optional oct with default
P: v1:011
A: -v1 012
   $opt_v1 10

T: Optional int with default
P: v1:08
A: -v1
   $opt_v1 8

T: Optional hex with default
P: v1:0x11
A: -v1
   $opt_v1 17

T: Optional hex with default
P: v1:0x11
A: -v1 0x12
   $opt_v1 18

T: Optional bin with default
P: v1:0b1100
A: -v1 0b110
   $opt_v1 6

T: Optional bin with default
P: v1:0b1100
A: -v1
   $opt_v1 12

T: Optional int with default
P: v1:5
A: -v1 3
   $opt_v1 3

T: Optional int with default
P: v1:5
A: -v1 0
   $opt_v1 0

T: Optional int with default
P: v1:-5
A: -v1
   $opt_v1 -5

T: Optional int with default
P: v1:-5
A: -v1 3
   $opt_v1 3

T: Optional int with default
P: v1:-5
A: -v1 0
   $opt_v1 0

T: Optional int with incr default
P: v1:+
A: -v1
   $opt_v1 1

T: Optional int with incr default
P: v1:+
A: -v1 -v1 -v1
   $opt_v1 3

T: Optional int with incr default
P: v1:+
A: -v1 -v1 -v1 6
   $opt_v1 6

T: Optional int with incr default
P: v1:+
A: -v1 0
   $opt_v1 0

O: bundling

T: Optional int with default
P: a:5 \\$v1 b \\$v2 c=s \\$v3
A: -a
   $v1 5

T: Optional int with default
P: a:5 \\$v1 b \\$v2 c=s \\$v3
A: -ba
   $v1 5
   $v2 1

T: Optional int with default
P: a:5 \\$v1 b \\$v2 c=s \\$v3
A: -ab
   $v1 5
   $v2 1

O:
R:

################ Empty option ################

P: v1:f a1:f@ v2

T: Lonely dash
A: - foo
   @ARGV - foo

T: Lonely dash
O: bundling
A: - foo
   @ARGV - foo

P+ ''

T: Lonely dash
A: -v1 -1.42 - foo
   $opt_v1 == -1.42
   $opt_ 1
   @ARGV foo

T: Lonely dash
A: -a1 -1.42 -a1 - -v2 -- foo
   @opt_a1 -1.42 0
   $opt_v2 1
   $opt_ 1
   @ARGV foo

T: Lonely dash
A: - foo
   $opt_ 1
   @ARGV foo

T: Lonely dash
O: bundling
A: - foo
   $opt_ 1
   @ARGV foo

T: Lonely dash may take a specification (yuck)
P: =i
A: - 4 foo
   $opt_ 4
   @ARGV foo

# Clear sticky opts.
P:

################ Other delimeters ################

T: Other delimeters
P: / seven=f \\$v1
A: /seven -1.42 foo
   $v1 == -1.42
   @ARGV foo

T: Other delimeters
P: / seven:f \\@a1 v1
A: /seven -1.42 /seven /v1 -- foo
   $opt_v1 1
   @a1 -1.42 0
   @ARGV foo

T: Other delimeters
P: / seven:f \\@a1 v1
A: /seven -2.74 /seven /v1 // foo
W: Unknown option: /

T: Other delimeters
P: seven=f \\$v1
A: --seven -1.42 foo
   $v1 == -1.42
   @ARGV foo

T: Other delimeters
P: seven:f \\@a1 v1
A: --seven -1.42 +seven -v1 -- foo
   $opt_v1 1
   @a1 -1.42 0
   @ARGV foo

T: Other delimeters
P: seven:f \\@a1 v1
A: --seven -1.42 +seven -v1 ++ foo
W: Unknown option: +

R: 2.3402

# Add / to option prefixes
O: bundling prefix_pattern=--|-|\\+|/

T: Other delimeters
P: seven=f \\$v1
A: /seven=-1.42 foo
W: Unknown option: s

T: Other delimeters
P: seven=f \\$v1
A: /s 1.42 foo
   $v1 1.42
   @ARGV foo

T: Other delimeters
P: seven:f \\@a1 v1
A: --seven=1.42 -- foo
   @a1 1.42
   @ARGV foo

# Treat / as a long option prefix.
O+ long_prefix_pattern=/

T: Other delimeters
P: seven:f \\@a1 v1
A: /seven=1.42 -- foo
   @a1 1.42
   @ARGV foo

T: Other delimeters
P: seven:f \\@a1 v1
A: /seven 1.42 -- foo
   @a1 1.42
   @ARGV foo

# Since / means long option, -- does not.

T: Other delimeters
P: seven:f \\@a1 v1
A: --seven=1.42 -- foo
W: Unknown option: seven=1.42

# Add -- to long options.

O+ long_prefix_pattern=/|--

T: Other delimeters
P: seven:f \\@a1 v1
A: --seven=1.42 -- foo
   @a1 1.42
   @ARGV foo

R:
O:

################ Auto-abbrev ################

P: six=f \\$v1 seven:f \\$v2 eight|opt8=s \\$v3 sixs=f \\@a1 sevens:f \\@a2

T: Auto-abbrev
A: -six -1.42 foo
   $v1 == -1.42
   @ARGV foo

T: Auto-abbrev
A: -e xxx foo
   $v3 xxx
   @ARGV foo

T: Auto-abbrev
A: -s -1.42 foo
W: Option s is ambiguous (seven, sevens, six, sixs)
W: Unknown option: 1.42

# Clear sticky opts.
P:

################ Aliases ################

P: v1|eight|opt8=s help|? \\$v1

T: Aliases
A: -v1 22 foo
   $opt_v1 22
   @ARGV foo

T: Aliases
A: -eight 22 foo
   $opt_v1 22
   @ARGV foo

T: Aliases
A: -opt8 22
   $opt_v1 22

T: Aliases/Autoabbrev
A: -o 22 foo
   $opt_v1 22
   @ARGV foo

T: Aliases/Autoabbrev
A: -v 22
   $opt_v1 22

T: Aliases/Autoabbrev
A: -e 22 foo
   $opt_v1 22
   @ARGV foo

T: 2.12 Allow ? as an alias (not primary).
A: -help foo
   $v1 1
   @ARGV foo

T: 2.12 Allow ? as an alias (not primary).
A: -? foo
   $v1 1
   @ARGV foo

T: 2.12 Allow ? as an alias (not primary).
P: help ? ?? ?|help
A: foo
E: Error in option spec: "?"
E: Error in option spec: "??"
E: Error in option spec: "?|help"

# Clear sticky opts.
P:

################ Dashes in option name ################

T: Dashes in option names
P: a-b \\$v1
A: -a-b foo
   $v1 1
   @ARGV foo

T: Dashes in option names
# Skip this with linkage, since the a-b -> opt_a_b translation doesn't
# take place.
P: a-b
A: -a-b foo
S: !linkage
   $opt_a_b 1
   @ARGV foo

T: Dashes in option names
# This is the variant for the linkage case.
P: a-b
A: -a-b foo
S: linkage
   $opt_a-b 1
   @ARGV foo

################ Periods in option name ################

T: Periods in option names
P: a.b \\$v1
A: -a.b foo
   $v1 1
   @ARGV foo

T: Periods in option names
# Skip this with linkage, since the a.b -> opt_a_b translation doesn't
# take place.
P: a.b
A: -a.b foo
S: !linkage
   $opt_a_b 1
   @ARGV foo

T: Periods in option names
# This is the variant for the linkage case.
P: a.b
A: -a.b foo
S: linkage
   $opt_a.b 1
   @ARGV foo

################ Arguments between options ################

T: Arguments between options (permute)
P: v1=f
A: foo -v1 1.2 bar
   $opt_v1 == 1.2
   @ARGV foo bar

################ POSIX compliancy ################

T: POSIX compliancy
P: v1:f v2
A: -v1 1.2 foo
   $opt_v1 == 1.2
   @ARGV foo

T: POSIX compliancy
O: posix_default
P: v1:f v2
A: -v1 1.2 foo
   $opt_v1 == 1.2
   @ARGV foo

T: POSIX compliancy
P: v1:f v2
A: --v1 1.2 foo
   $opt_v1 == 1.2
   @ARGV foo

T: POSIX compliancy
O: posix_default
P: v1:f v2
A: --v1 1.2 foo
   $opt_v1 == 1.2
   @ARGV foo

T: POSIX compliancy
P: v1:f v2
A: +v1 1.2 foo
   $opt_v1 == 1.2
   @ARGV foo

T: POSIX compliancy
O: posix_default
P: v1:f v2
A: +v1 1.2 foo
   @ARGV +v1 1.2 foo

T: POSIX compliancy
P: v1:f v2
A: foo -v1 1.2
   $opt_v1 == 1.2
   @ARGV foo

T: POSIX compliancy
O: posix_default
P: v1:f v2
A: foo -v1 1.2
   @ARGV foo -v1 1.2

################ Bundling ################

O: bundling

T: Short options should not be case sensitive
P: a \\$v1 A \\$v2
A: -a foo
   $v1 1
   @ARGV foo

T: Short options should not be case sensitive
P: a \\$v1 A \\$v2
A: -A foo
   $v2 1
   @ARGV foo

T: Short aliases should not be case sensitive
P: xx|a \\$v1 yy|A \\$v2
A: -a foo
   $v1 1
   @ARGV foo

T: Short aliases should not be case sensitive
P: xx|a \\$v1 yy|A \\$v2
A: -A foo
   $v2 1
   @ARGV foo

T: Short options should not be case sensitive
P: a=n \\$v1 A=n \\$v2
A: -a21A 12 foo
   $v1 21
   $v2 12
   @ARGV foo

T: Short options should not be case sensitive
P: a=n \\$v1 A=n \\$v2
A: -a21A12a33 foo
   $v1 33
   $v2 12
   @ARGV foo

T: Unbundle short and long
P: a \\$v1 one \\$v2
A: -a --one foo
   $v1 1
   $v2 1
   @ARGV foo

T: Unbundle short and long
O+ bundling_override
P: a \\$v1 one \\$v2
A: -aone foo
   $v1 1
   $v2 1
   @ARGV foo

T: Unbundle short and long, with ignore case
O+ bundling_override
P: a \\$v1 One \\$v2
A: -aone foo
   $v1 1
   $v2 1
   @ARGV foo

T: Unbundle short and long, with override and ignore case
R: 2.2602
O+ bundling_override
P: a \\$v1 one \\$v2
A: -aOne foo
   $v1 1
   $v2 1
   @ARGV foo

T: Unbundle short and long, with override and ignore case
R: 2.2602
O+ bundling_override
P: a \\$v1 one \\$v2
A: -aoNe foo
   $v1 1
   $v2 1
   @ARGV foo

P: a! \\$v1 b=s \\$v2 c:s \\$v3

T: Bundling
A: -a -b -c foo
   $v1 1
   $v2 -c
   @ARGV foo

T: Bundling
A: -a -b-c --noa foo
   $v1 0
   $v2 -c
   @ARGV foo

T: Bundling
A: -a -b-c -noa foo
W: Unknown option: n
W: Unknown option: o

T: Bundling
A: -a -c-b foo
   $v1 1
   $v3 -b
   @ARGV foo

T: Bundling
P: a f=i
A: -fa
W: Value "a" invalid for option f (integer number expected)

T: Bundling
P: a f=i
A: -fx
W: Value "x" invalid for option f (integer number expected)
W: Unknown option: x

T: Bundling
P: a \\$v1 f:i \\$v2
A: -fa
   $v1 1
   $v2 0

T: Bundling
P: foo \\$v1 f=s \\$v2
A: -fxx -foo foo
   $v2 oo
   @ARGV foo

T: Bundling override
O+ bundling_override
P: foo \\$v1 f=s \\$v2
A: -fxx -foo foo
   $v1 1
   $v2 xx
   @ARGV foo

T: Bundling
P: a \\@a1 l=i \\$v1 w=i \\$v2 e=i \\$v3 f \\@a2
A: -al24w80e3f foo
   $v1 == 24
   $v2 == 80
   $v3 == 3
   @a1 1
   @a2 1
   @ARGV foo

T: Bundling
P: a \\@a1 l=i \\$v1 w=f \\$v2 e=i \\$v3 f \\@a2
A: -al24w80e3f foo
   $v1 == 24
   $v2 == 80000
   @a1 1
   @a2 1
   @ARGV foo

T: Bundling
P: a=o \\$v1 b=o \\$v2 x=o \\$v3
A: -a24b0b10x0x10 foo
   $v1 == 24
   $v2 == 0b10
   $v3 == 0x10
   @ARGV foo

T: Bundling with hashes
P: a=i \\%h1
A: -a4=2
   %h1 4 2

T: Bundling with hashes
P: a=f \\%h1
A: -a4=2e1
   %h1 4 2e1

R: <= 2.3201

T: Bundling with hashes
P: a=i \\%h1 b=f \\%h2
A: -aa=2bb=1e1a3
   %h1 3 1 a 2
   %h2 b 1e1

R: 2.3202

T: Bundling with hashes
P: a=i \\%h1 b=f \\%h2
A: -aa=2bb=1e1a3
W: Option a, key "3", requires a value
W: Unknown option: 3
   %h1 3 1 a 2
   %h2 b 1e1

R:

T: Bundling with hashes and a default
P: a:7 \\%h1 b=f \\%h2
A: -a4=2b5=1e1a3
   %h1 3 7 4 2
   %h2 5 1e1

T: Bundling and unknown options
P: a \\$v1 b \\$v2
A: -acb
W: Unknown option: c

T: Bundling and illegal values
P: a=i \\$v1 b \\$v2
A: -acb
W: Value "cb" invalid for option a (integer number expected)
W: Unknown option: c

# Clear sticky config.
O:

################ Bundling Override + Case Ignore ################

O: nopermute bundling bundling_override
P: a \\$v1 A \\$v2

T: Short options should not be case sensitive
A: -a foo
   $v1 1
   @ARGV foo

T: Short options should not be case sensitive
A: -A foo
   $v2 1
   @ARGV foo

# Clear sticky config.
O:
P:

################ Bundling + getopt_compat ################

T: No bundling + no getopt_compat
O: no_bundling no_getopt_compat
P: v1=s
A: +v1=bar
   @ARGV +v1=bar

T: No bundling + getopt_compat
O: no_bundling getopt_compat
P: v1=s
A: +v1=bar foo
   $opt_v1 bar
   @ARGV foo

T: Bundling + getopt_compat
O: bundling getopt_compat
P: v1=s
A: +v1=bar foo
W: Unknown option: v

T: Bundling + getopt_compat
O: bundling getopt_compat
P: v1=s
A: --v1=bar foo
   $opt_v1 bar
   @ARGV foo

T: Bundling override + getopt_compat
O: bundling_override getopt_compat
P: v1=s
A: +v1=bar foo
   $opt_v1 bar
   @ARGV foo

################ Pass-Through ################

T: Pass-Through
O: pass_through
P: x1
A: -xx x1=foo
   @ARGV -xx x1=foo

T: Pass-Through
O: pass_through require_order
P: x1
A: -xx x1=foo
   @ARGV -xx x1=foo

T: Pass-Through
O: pass_through
P: v1=i v2=f
A: -v1 blech -v2=6.3
   @ARGV -v1 blech
   $opt_v2 == 6.3

T: Pass-Through
O: pass_through
P: v1=i v2=f
A: -v2=blech -v1 6
   @ARGV -v2=blech
   $opt_v1 == 6

T: Pass-Through
O: pass_through
P: v1=i v2=f
A: -v2=blech -v1 6 -- -v1 7
   @ARGV -v2=blech -- -v1 7
   $opt_v1 == 6

################ Option character case ################

T: Option character case
P: Help \\$v1
A: -HeLp foo
   $v1 1
   @ARGV foo

T: Option character case
O: no_ignore_case
P: Help \\$v1 HeLp \\$v2
A: -HeLp foo
   $v2 1
   @ARGV foo

# Bug report by Brian Wilson <bcwilson@VNET.IBM.COM>, Jan 1997:
# The other bug is that ignorecase is only evaluated with autoabbrev
# on during option processing.
# >>> solved in 2.06
T: Option character case
O: no_auto_abbrev
P: Help \\$v1
A: -HeLp foo
   $v1 1
   @ARGV foo

# Bug report by Seth Robertson <seth@systemdetection.com>, 2.28:
# Options not recognized when ignorecase and autoabbrev are both off.
T: Option character case
O: no_auto_abbrev no_ignore_case
P: foo
A: --foo --Foo -f
W: Unknown option: Foo
W: Unknown option: f

# Bug report from tmohr@schleim.qwe.de (Torsten Mohr).
# It is incorrect use, but a bug nevertheless.
# This generates warnings. It shouldn't.
T: Option character case
P: I=s@ \\@a1 D=s% \\%h1
A: -I foo -d aa=bb bar
   @a1 foo
   %h1 aa bb
   @ARGV bar

################ Auto-vivification of Arrays ################

P: xx=s@ \\$v1

T: Auto-vivification of Arrays
A:

T: Auto-vivification of Arrays
A: -xx aa
   @$v1 aa

T: Auto-vivification of Arrays
A: -xx aa -xx bb
   @$v1 aa bb

P:

################ Hashes ################

T: Hashes
P: hs=s \\%h1
A: -hs x1=foo bar
   %h1 x1 foo
   @ARGV bar

T: Hashes
P: hi=i \\%h1
A: -hi x1=12 bar
   %h1 x1 12
   @ARGV bar

R: <= 2.3201

T: Hashes
P: hi=i \\%h1
A: -hi x1=12 -hi x2 bar
   %h1 x1 12 x2 1
   @ARGV bar

R: 2.3202

T: Hashes
P: hi=i \\%h1
A: -hi x1=12 -hi x2 bar
W: Option hi, key "x2", requires a value

T: Hashes
P: hi:i \\%h1
A: -hi x1=12 -hi x2 bar
   %h1 x1 12 x2 1
   @ARGV bar

R:

T: Hashes
P: hi=i \\%h1
A: -hi x1=aa bar
W: Value "aa" invalid for option hi (integer number expected)

T: Hashes
P: hs=s \\%h1
A: -hs x1= bar
   %h1 x1 ""
   @ARGV bar

R: <= 2.3201

T: Hashes
P: hs=s \\%h1
A: -hs x1 bar
   %h1 x1 1
   @ARGV bar

R: 2.3202

T: Hashes
P: hs=s \\%h1
A: -hs x1 bar
W: Option hs, key "x1", requires a value

T: Hashes
P: hs:s \\%h1
A: -hs x1 bar
   %h1 x1 ""
   @ARGV bar

R:

T: Hashes
P: hs=s \\%h1
A: -hs x1=x1=x1 bar
   %h1 x1 x1=x1
   @ARGV bar

T: Hashes
P: hi=i \\%h1
A: -hi x1= bar
W: Value "" invalid for option hi (integer number expected)

T: Hash with default
P: gsx:5 \\%h1
A: -gsx foo bar
   %h1 foo 5
   @ARGV bar

################ Auto-vivification of Hashes ################

P: xx=s% \\$v1

T: Auto-vivification of ref to hash ref
A:

T: Auto-vivification of ref to hash ref
A: -xx x1=aa
   %$v1 x1 aa

T: Auto-vivification of ref to hash ref
A: -xx x1=aa -xx x2=bb
   %$v1 x1 aa x2 bb

P:

################ Increments ################

T: Increments
P: v1+
A: -v1 foo
   $opt_v1 1
   @ARGV foo

T: Increments
P: v1+
A: -v1 -v1 -v1 foo -v1
   $opt_v1 4
   @ARGV foo

T: Increments
O: require_order
P: v1+
A: -v1 -v1 -v1 foo -v1
   $opt_v1 3
   @ARGV foo -v1

T: Increments
O: bundling
P: v+ \\$v1
A: -vvv foo
   $v1 3
   @ARGV foo

################ Internal/External linkage ################

T: Mixing linkage
P: v1=i v2=s \\$v2 v3 a1=s \\@a1 a2=i@ a3 \\@a3
A: -v1 1 -v2 aaa -v3 -a1 bbb -a1 bbb -a2 4 -a2 5 -a3 -a3 foo
   $opt_v1 1
   $v2 aaa
   $opt_v3 1
   @a1 bbb bbb
   @opt_a2 4 5
   @a3 1 1
   @ARGV foo

################ Some errors ################

R: <= 2.2603

T: Some error situations
P: v1 <> \\$v3 v2
E: Option spec <> requires a reference to a subroutine
E: /^Error in option spec: "SCALAR\(0x

T: Some error situations
P: v1 x@@! \\$v3 v2
E: Error in option spec: "x@@!"
E: /^Error in option spec: "SCALAR\(0x

R: 2.2604

T: Some error situations
P: v1 <> \\$v3 v2
E: Option spec <> requires a reference to a subroutine

T: Some error situations
P: v1 x@@! \\$v3 v2
E: Error in option spec: "x@@!"

T: Check dups (these are warnings now)
P: foo|bar=s Bar Foo bar|foo=i
A:
W: Duplicate specification "Bar" for option "bar"
W: Duplicate specification "Foo" for option "foo"
W: Duplicate specification "bar|foo=i" for option "bar"
W: Duplicate specification "bar|foo=i" for option "foo"

R:

################ Callbacks ################

T: Callbacks
P: xx \\&ok
A: -xx foo
   $v1 1
   @ARGV foo

T: Callbacks
P: xx=s \\&ok
A: -xx bar foo
   $v1 bar
   @ARGV foo

T: Callbacks
P: xx=s% \\&ok
A: -xx bar=blech foo
   $v1 bar|blech
   @ARGV foo

T: Callbacks (non-option)
P: <> \\&ok
A: xx foo
   $v1 x

T: Callbacks (using warn (obsolete))
P: xx \\&warn yy \\&warn
A: -xx -yy foo
W: Callback warning for "xx"
W: Callback warning for "yy"

T: Callbacks (using die)
P: xx \\&die yy \\&die
A: -xx -yy foo
W: Callback died for "xx"
W: Callback died for "yy"

T: Callbacks (using !FINISH)
P: xx \\&finish yy \\&finish
A: -xx -yy foo
   $v1 1
   @ARGV -yy foo

T: Callbacks (using !FINISH)
P: xx \\&ok <> \\&finish
A: -xx yy foo
   $v1 x
   @ARGV foo

T: Callbacks (using !FINISH)
P: xx=s \\&ok <> \\&finish
A: -xx yy foo
   $v1 x

T: Callbacks (using !FINISH, Merijn Brand special)
O: bundling
P: x \\$v2 y \\&finish z \\$v3
A: -xyzzy -yy foo
   $v1 1
   $v2 1
   @ARGV -zzy -yy foo

################ Auto-version/help clash suppressing ################

T: Auto-version/help clash suppressing
P: verbose \\$v1
A: -v foo
   $v1 1
   @ARGV foo

T: Auto-version/help clash suppressing
R: 2.33
P: verbose \\$v1
A: -v foo
   $v1 1
   @ARGV foo

################ Repeat args ################

R: 2.3401

T: Repeat args -- syntaxis
P: foo=s{} \\@a1
A:

T: Repeat args -- syntaxis
P: foo=s@{} \\@a1
A:

T: Repeat args -- syntaxis
P: foo=s{1} \\@a1
A:

T: Repeat args -- syntaxis
P: foo=s@{1} \\@a1
A:

T: Repeat args -- syntaxis
P: foo:s{1} \\@a1
A:

T: Repeat args -- syntaxis
P: foo:s@{1} \\@a1
A:

T: Repeat args -- syntaxis
P: foo=s{,1} \\@a1
A:

T: Repeat args -- syntaxis
P: foo:s{,1} \\@a1
A:

T: Repeat args -- syntaxis
P: foo=s{,} \\@a1
A:

T: Repeat args -- syntaxis
P: foo:s{,} \\@a1
A:

T: Repeat args -- syntaxis
P: foo=s{0} \\@a1
E: {0} is useless in option spec: "foo=s{0}"
A:

T: Repeat args -- syntaxis
P: foo:s{0} \\@a1
E: {0} is useless in option spec: "foo:s{0}"
A:

T: Repeat args -- syntaxis
P: foo=s{,0} \\@a1
E: Max must be greater than zero in option spec: "foo=s{,0}"
A:

T: Repeat args -- syntaxis
P: foo:s{,0} \\@a1
E: Max must be greater than zero in option spec: "foo:s{,0}"
A:

T: Repeat args -- syntaxis
P: foo=s{2,1} \\@a1
E: Max less than min in option spec: "foo=s{2,1}"
A:

T: Repeat args -- syntaxis
P: foo:s{2,1} \\@a1
E: Max less than min in option spec: "foo:s{2,1}"
A:

T: Repeat args
P: foo=s{2,3} \\@a1
A: --foo aa bb cc dd --foo pp qq -- rr
   @ARGV dd rr
   @a1 aa bb cc pp qq

T: Repeat args
P: foo=s{2,3} \\@a1 bar \\$v1
A: --foo aa bb --bar dd --foo pp qq --bar rr
   @ARGV dd rr
   @a1 aa bb pp qq
   $v1 1

T: Repeat args
P: foo=s{2,3} \\@a1 bar \\$v1
A: --foo=aa bb --bar dd --foo pp qq --bar rr
   @ARGV dd rr
   @a1 aa bb pp qq
   $v1 1

T: Repeat args
P: foo=s{2,3} \\@a1 bar+ \\$v1
A: --foo --bar --bar --bar --bar
   @a1 --bar --bar
   $v1 2

T: Repeat args (int)
P: foo=i{2,3} \\@a1 bar+ \\$v1
A: --foo 1 -2 3 aa bb
   @a1 1 -2 3
   @ARGV aa bb

T: Repeat args (int)
P: foo=i{2,3} \\@a1 bar+ \\$v1
A: --foo 1 -2 aa bb
   @a1 1 -2
   @ARGV aa bb

#### Changed due to bugfix #88707

R: < 2.4101

T: Repeat args (float) (pre 2.42)
P: foo=f{2,3} \\@a1 bar+ \\$v1
A: --foo 1.1 -2.2 .3 aa bb
   @a1 1.1 -2.2 .3
   @ARGV aa bb

#### Changed back due to bugfix #89513

R: 2.4601

T: Repeat args (float) (pre 2.42)
P: foo=f{2,3} \\@a1 bar+ \\$v1
A: --foo 1.1 -2.2 .3 aa bb
   @a1 1.1 -2.2 .3
   @ARGV aa bb

R: == 2.4101

T: Repeat args (float) (2.42 and later)
P: foo=f{2,3} \\@a1 bar+ \\$v1
A: --foo 1.1 -2.2 .3 aa bb
   @a1 1.1 -2.2
   @ARGV .3 aa bb

R:

#### End

T: Repeat args (int)
P: foo=i{2,3} \\@a1 bar+ \\$v1
A: --foo 1 aa bb
W: Value "aa" invalid for option foo

T: Repeat args
P: foo=s{2,3} \\@a1 bar+ \\$v1
A: --foo aa bb
   @a1 aa bb

T: Repeat args
P: foo=s{2,3} \\@a1 bar+ \\$v1
A: --foo aa -- bb
   @a1 aa -- bb

T: Repeat args
P: foo=s{2,3} \\@a1 bar+ \\$v1
A: --foo aa
W: Insufficient arguments for option foo

T: Repeat args
P: foo=s{2,4} \\%h1 bar+ \\$v1
A: --foo xx=aa yy=bb zz=cc qqq
   %h1 xx aa yy bb zz cc
   @ARGV qqq

# From: Ryan <uncle_george@hotmail.com>
# Subject: new range feature. CTL_AMAX, argcnt checking against -1
#
# I love the new range functionality.  I found a bug when using the
# undefined max range like in the example.  I even found a fix. : )

T: Repeat args
P: foo=s{2,} \\@a1
A: --foo one two three four five
   @a1 one two three four five

# Thanks, Ryan.

T: Repeat args
P: foo=s{,2} \\@a1
A: --foo one two three four five
   @a1 one two
   @ARGV three four five

T: Repeat args
P: foo=s{,2} \\@a1
A: --foo one two
   @a1 one two

T: Repeat args
P: foo=s{,2} \\@a1
A: --foo one
   @a1 one

T: Repeat args
P: foo:s{,2} \\@a1
A: --foo

T: Repeat args
P: foo=s{,2} \\@a1
A: --foo
W: Option foo requires an argument

R: 2.3502

T: Repeat args, numeric w/ underscore
P: foo=i{,2} \\@a1
A: --foo _123 _4_56
   @a1 123 456

T: Repeat args, numeric w/ underscore
P: foo=i{2} \\@a1
A: --foo _123 _4_56
   @a1 123 456

T: Repeat args, numeric w/ underscore
P: foo=i{,3} \\@a1
A: --foo _123 _4_56 _
   @a1 123 456
   @ARGV _

R:

################ Miscellaneous ################

#  From: "Epstein, Caleb" <cepstein@Montgomery.com>
#  Subject: Strict warning from Getopt::Long under
#  Date: Thu, 11 Feb 1999 08:37:00 -0500
#
#  I get warnings from perl with Getopt::Long and code like this:
#
#  		#!/usr/local/bin/perl -w
#  		use strict;
#  		use Getopt::Long;
#  		my @ARY;
#  		my $retval = GetOptions ("A|apple=s@" => \@ARY);
#  		print join ("\n", @ARY), "\n";
#
#  The warning message is:
#
#  	Use of uninitialized value at
#  /home/cepstein/lib/perl5/auto/Getopt/Long/GetOptions.al line 173.

T: Option names that are not lowercase give warnings unless ignorecase is switched off
O: no_ignore_case
P: A|apple=s@ \\@a1
A:

T: Option names that are not lowercase give warnings unless ignorecase is switched off
O: ignore_case
P: A|apple=s@ \\@a1
A:

# From: Haakon Riiser <haakon.riiser@fys.uio.no>
# Subject: Getopt::Long error messages with :config bundling
# Date: Tue, 24 Feb 2004 16:45:32 +0100
#
# I'll get right to the point. :-)
#
#   ----- begin test.pl -----
#   use Getopt::Long qw(:config bundling);
#   GetOptions("help");
#   ----- end test.pl -----
#
#   $ perl test.pl --invalid
#   Unknown option: i
#
# Is this error message intentional?

T: Error messages with :config bundling
O: bundling
P: foo \\$v1
A: --invalid
W: Unknown option: invalid

T: RT #12380
P: no-a no-b|no-c
A: --no-
W: Option no- is ambiguous (no-a, no-b, no-c)

# From: Abigail <abigail@abigail.nl>
# Subject: Getopt::Long::Configure 'no_getopt_compat'
# Date: Tue, 14 Feb 2006 23:58:07 +0100
# According to the manual page, configuring Getopt::Long with the
# 'no_getopt_compat' should disable options starting with a '+'.

T: no_getopt_compat
O: no_getopt_compat
P: foo=s
A: +foo bar
   @ARGV +foo bar

# From: khali@linux-fr.org
# Date: Tue, 23 May 2006 08:33:39 -0400 (EDT)
# When using an option with an optional hash value, values (not keys)
# starting with a dash trigger an unexpected error:
#
# perl -MGetopt::Long -we "GetOptions('replace:s%');" -- --replace a=-b
# Unknown option: b

T: Optional hash value
P: foo:s% \\$v1
A: --foo a=-b
   %$v1 a -b

T: Optional hash value
P: foo:s% \\$v1
A: --foo=a=-b
   %$v1 a -b

T: Mandatory hash value
P: foo=s% \\$v1
A: --foo a=-b
   %$v1 a -b

# From: "David Boyce" <dsb@boyski.com>
# Subject: bug report for Getopt::Long (null required arguments)
# Date: Fri, 2 Mar 2007 13:21:44 -0500

T: Null required arguments
P: v1=s
A: --v1= xxx
W: Option v1 requires an argument
   $opt_v1 ""
   @ARGV xxx

T: Null required arguments
P: v1=s
A: --v1 "" xxx
   $opt_v1 ""
   @ARGV xxx

T: Null required arguments
P: v1:s
A: --v1= xxx
   $opt_v1 ""
   @ARGV xxx

T: Null required arguments
P: v1:s
A: --v1 "" xxx
   $opt_v1 ""
   @ARGV xxx

O: gnu_compat

T: Null required arguments
P: v1=s
A: --v1= xxx
   $opt_v1 ""
   @ARGV xxx

T: Null required arguments
P: v1=s
A: --v1 "" xxx
   $opt_v1 ""
   @ARGV xxx

T: Null required arguments
P: v1:s
A: --v1= xxx
   $opt_v1 ""
   @ARGV xxx

T: Null required arguments
P: v1:s
A: --v1 "" xxx
   $opt_v1 ""
   @ARGV xxx

O:

# <MARKOV@cpan.org>
# Simpelest program: "run"
#
# #!/usr/bin/perl
# use Getopt::Long;
# GetOptions('a', 'b') or die;
#
# then execute:
# ./run +
#
# results in:
# Option is ambiguous (a, b)
# Died at ./run line 6.
#
# It should be an error.

T: #24941: Autoabbrev with + incorrect
P: v1:s
A: +
W: Missing option after +

T: #67577 Parsing of type 'o' not correct for multiple values
P: opt=o@{,} \\@a1
A: --opt 1 2 0x3
   @a1 1 2 3

T: #67577 Parsing of type 'o' not correct for multiple values
P: opt=o@{,} \\@a1
A: --opt 0x1 2 0x3
   @a1 1 2 3

T: #67577 Parsing of type 'o' not correct for multiple values
P: opt=o@{,} \\@a1
A: --opt 0x1 0x2 0x3
   @a1 1 2 3

T: #86095 Possible problem with aliases
P: emchk|emcheck! \\$v1
A: --noemche
   $v1 0

T: #86095 Possible problem with aliases
P: emchk|emcheck! \\$v1
A: --noemch
   $v1 0

T: #88707 name=f accepts 1.2.3
P: name=f \\$v1
A: --name=1.2.3
W: Value "1.2.3" invalid for option name (real number expected)

# This error was introduced in 2.43 and changed to a warning in 2.44.
T: #92462: Options to Non-Option Handler when pass_through is Enabled
O: pass_through
R: == 2.43
P: <> \\&warn foo=i
A: --foo 5 --bar 2 test
E: Option spec <> cannot be used with pass_through
   @ARGV --bar 2 test

# This error was introduced in 2.43 and changed to a warning in 2.44.
T: #102207: Option spec <> cannot be used with pass_through error
O: pass_through
R: == 2.44
P: <> \\&warn foo=i
A: --foo 5 --bar 2 test
W: Option spec <> cannot be used with pass_through. FIX IT!
   @ARGV --bar 2 test

T: Callbacks w/ pass_through; up to 2.42.
R: <= 2.42
O: pass_through
P: <> \\&ok
A: xx foo
   $v1 x

T: Callbacks w/ pass_through; 2.43 only.
R: == 2.43
O: pass_through
P: <> \\&ok
A: xx foo
E: Option spec <> cannot be used with pass_through
   $v1 x

T: Callbacks w/ pass_through; 2.44 only.
R: == 2.44
O: pass_through
P: <> \\&ok
A: xx foo
W: Option spec <> cannot be used with pass_through. FIX IT!
   @ARGV xx foo

T: Callbacks w/ pass_through; as of 2.45 only. Reverted to <= 2.42.
R: 2.45
O: pass_through
P: <> \\&ok
A: xx foo
   $v1 x

T: #89513 name=f does not accept .1
P: v1=f \\$v1
A: --v1=.1
   $v1 .1

T: #39052: gnu_getopt option not 100% identical to GNU getopt
# If the option has an optional argument, it must be written directly
# after the long option name, separated by '=', if present".
P: foo:s \\$v1
O: gnu_compat
A: --foo=bar
   $v1 bar

T: #39052: gnu_getopt option not 100% identical to GNU getopt
# If the option has an optional argument, it must be written directly
# after the long option name, separated by '=', if present".
# THIS BREAKS SCRIPTS. WITHDRAWN in 2.50.
P: foo:s \\$v1
O: gnu_compat
A: --foo bar
   $v1 bar

T: #39052: gnu_getopt option not 100% identical to GNU getopt
# Seems to break single character options with optional arguments. For
# example, using the config 'f:s', `-fx` consumes 'x' but doesn't set
# 'f'.
# ... does it?
P: f:s \\$v1
O: gnu_compat
A: -fx y
##W: Unknown option: fx
##   @ARGV y
   $v1 x
   @ARGV y

# THIS BREAKS SCRIPTS. WITHDRAWN in 2.50.
T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: f:s \\$v1
O: gnu_compat
A: -f x y
   $v1 x
   @ARGV y

T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: f=s \\$v1
O: gnu_compat
A: -fx y
   $v1 x
   @ARGV y

T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: f=s \\$v1
O: gnu_compat
A: -f x y
   $v1 x
   @ARGV y

T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: foo:s \\$v1
O: gnu_compat
A: --foo=x y
   $v1 x
   @ARGV y

# THIS BREAKS SCRIPTS. WITHDRAWN in 2.50.
T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: foo:s \\$v1
O: gnu_compat
A: --foo x y
   $v1 x
   @ARGV y

T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: foo=s \\$v1
O: gnu_compat
A: --foo=x y
   $v1 x
   @ARGV y

T: #39052: gnu_getopt option not 100% identical to GNU getopt
P: foo=s \\$v1
O: gnu_compat
A: --foo x y
   $v1 x
   @ARGV y

T: #114999: ":number" broken in 2.48
P: c:20 \\$v1
O: gnu_getopt
A: -c
   $v1 20

# Wrong Option Selected Using Getopt::Long
# https://rt.perl.org/Public/Bug/Display.html?id=130764
# Reported by Geoff Hull <gbhull@gmail.com>
# Copied to rt.cpan.org, #120231
T: #120231: Confusing case dependence in primary names w/ bunding
P: P|pids-only|pid-only \\$v1 p|prdn|production \\$v2
O: bundling ignore_case
A: --pid
   $v1 1

# Regression in 2.48
T: #120300: optional option value broken with gnu_compat
P: a:s \\$v1 b \\$v2
O: gnu_compat
A: -a avalue -b extra1 extra2
   @ARGV extra1 extra2
   $v1 avalue
   $v2 1

T: PR#7: Provide a default value for optional arguments (gnu_compat)
P: foo:s \\&ok
O: gnu_compat
A: --foo
   $v1 ''

T: #122068: Incremental option processing broken.
O: gnu_getopt
P: verbose|v:+ \\$v1
A: -vvvv
   $v1 4

T: #125370: Impossible to have option "-=" 
O: bundling
P: user-option|=:s \\$v1
A: -=foo
   $v1 'foo'

# Actually it is require_order that causes the problem.
T: #134352 Getopt::Long wrongly removes '--' with pass_through
O: pass_through require_order
P: a \\$v1
A: -a -b -- -noarg
   @ARGV -b -- -noarg
   $v1 1

T: #134352 Getopt::Long wrongly removes '--' with pass_through
O: pass_through require_order
P: a \\$v1
A: -a -- -noarg
   @ARGV -- -noarg
   $v1 1

T: #127584 Optional hash-valued option warns when key is missing, even though the key is not required
P: v:s% \\%h1
A: -v
W: Option v requires an argument

T: Detect duplicate options when ignore_case is in effect
O: ignore_case
P: v=i \\$v1 V=i \\$v2
A: -v 1 -V 2
   $v2 2
W: Duplicate specification "V=i" for option "v"

T: Detect duplicate options when ignore_case is in effect
O: no_ignore_case
P: v=i \\$v1 V=i \\$v2
A: -v 1 -V 2
   $v1 1
   $v2 2
